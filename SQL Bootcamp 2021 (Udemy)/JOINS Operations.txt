
* JOINS: Allows for combining info from multiple tables - different joins affect how data is handled when only present in 1 table
	>> INNER JOINS -- Only matching
	>> OUTER JOINS -- Choose handling of missing data
	>> FULL JOINS  -- Adds all and inserts NULL values for missing records
	>> UNIONS      -- IDK

> AS: Used to create aliases for a column or result (new column) - executed at the end of a query (cannot be used inside WHERE)
	$ SELECT SUM(c) AS new_name FROM t

	$ 
	SELECT c1, SUM(c2) AS new_name 
	FROM t
	GROUP BY c1
	HAVING SUM(c2) > 100 -- must reference the aggregate by the aggregate itself (AS aliases are made after all processing)

> INNER JOIN: The result will be the set of records that exist in both tables (only matching values)
	>> The syntex is symmetrical (joining t2 on t1 is the same as t1 on t2)
	>> To specify a column from only 1 of the tables, use t.col_name in the SELECT statement
	
	$
	SELECT c FROM t1
	INNER JOIN t2
	ON t1.col_match = t2.col_match

	$
	SELECT c1, t1.c2, t2.c3 FROM t1 -- this states get c1 from wherever, then c2 from t1 and c3 from t2
	INNER JOIN t2
	ON t1.col_match = t2.col_match

> FULL OUTER JOIN: The result will be all values from both tables - missing records are represented by 'null'

	$
	SELECT * FROM t1
	FULL OUTER JOIN t2
	ON t1.col_match = t2.col_match

	>> Using a WHERE statement is how we can isolate rows that are unique to either table (rows not found in both tables)

	$
	SELECT * FROM t1
	FULL OUTER JOIN t2
	ON t1.col_match = t2.col_match
	WHERE t1.id IS null OR t2.id IS null -- this results in only values that are different (basically opposite of INNER JOIN)

> LEFT OUTER JOIN: The results will be A-symmetrical (all results from the first table, only matching records from the other table)
	>> Records from table 1 that are missing in table 2 are represented by 'null'
	>> LEFT JOIN is the same as LEFT OUTER JOIN

	$
	SELECT * FROM t1
	LEFT OUTER JOIN t2
	ON t1.col_match = t2.col_match

	>> Using a WHERE statement is how we can isolate rows that are unique to only 1 table (any matching records are now also dropped)

	$
	SELECT * FROM t1
	LEFT OUTER JOIN t2
	ON t1.col_match = t2.col_match
	WHERE t2.id IS null

> RIGHT OUTER JOINS: (RIGHT JOIN) The same thing as reversing the order of tables in a LEFT OUTER JOIN
	>> ALL the same methods apply here as above

> UNION: Used to combine the result-set of 2 or more SELECT statements - concatenating results
	>> The SELECT operations should result in logically stackable tables
	
	$
	SELECT c1, c2 FROM t1
	UNION
	SELECT c1, c2 FROM t2
	ORDER BY c1				-- You can run operations on the united results 

* NOTE: You can chain together as many JOIN statements as you need - operations for filtering/sorting occur after all JOIN statements

