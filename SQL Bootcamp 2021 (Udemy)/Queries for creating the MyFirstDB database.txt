
:: This creates the general account table for users who join pur organization

CREATE TABLE account(
	user_id SERIAL PRIMARY KEY,
	username VARCHAR(50) UNIQUE NOT NULL,		-- Usernames should be unique (Unique columns will appear as 'key' constraints in Schemas)
	password VARCHAR(50) NOT NULL,
	email VARCHAR(250) UNIQUE NOT NULL,			-- Emails should be unique
	created_on TIMESTAMP NOT NULL,				
	last_login TIMESTAMP						-- We omit NOT NULL here in case someone never logs in
);

:: This table is an intermediary table connecting job IDs to their names

CREATE TABLE job(
	job_id SERIAL PRIMARY KEY,
	job_name VARCHAR(200) UNIQUE NOT NULL
);

:: This table relates the user and the job

CREATE TABLE account_job(
	user_id INTEGER REFERENCES account(user_id),  	-- This creates a Foreign Key reference to the Primary Key in the account table
	job_id INTEGER REFERENCES job(job_id),			-- Another FK
	hire_date TIMESTAMP
);

:: Insert the first value into the account table

INSERT INTO account(username, password, email, created_on)
VALUES
	('Bob', 'password', 'I_am_Bob@gmail.com', CURRENT_TIMESTAMP);

:: Insert some jobs into the job table

INSERT INTO job(job_name)
VALUES
	('President'),
	('Astronaut'),
	('Data Analyst');

:: Insert an entry into the account_job intermediary table

INSERT INTO account_job(user_id, job_id, hire_date)
VALUES
	(1, 1, CURRENT_TIMESTAMP);	-- If you try to run this with IDs not yet present in other tables, the FK constraints will throw errors

:: Update the hire date rows in account_job to be the same value as the created_on rows in account

UPDATE account_job
SET hire_date = account.created_on
FROM account
WHERE account_job.user_id = account.user_id;

:: Update the last login entry

UPDATE account
SET last_login = CURRENT_TIMESTAMP
RETURNING email, created_on, last_login; 

:: Delete a job from the job table

DELETE FROM job
WHERE job_name = 'Astronaut'
RETURNING job_id, job_name;		-- NOTE: You cannot delete record 1 because it is still linked by FK to account_job (will throw errors)

:: Create a new table (to practice altering)

CREATE TABLE information(
	info_id SERIAL PRIMARY KEY,
	title VARCHAR(500) NOT NULL,
	person VARCHAR(50) NOT NULL UNIQUE
);

:: Rename the information table to new_info

ALTER TABLE information
RENAME TO new_info;

:: Rename a column in the new_info table

ALTER TABLE new_info
RENAME COLUMN person TO people;

:: Drop the NOT NULL constraint from the people column of new_info (effectively, allow new records to not require that field)

ALTER TABLE new_info
ALTER COLUMN people DROP NOT NULL;

:: Insert new record into new_info table

INSERT INTO new_info(title)
VALUES
	('some new title');

:: Drop the people column from the new_info table

 ALTER TABLE new_info
 DROP COLUMN people;

:: Create a new table for employees with CHECK constraints applied

CREATE TABLE employees(
	emp_id SERIAL PRIMARY KEY,
 	first_name VARCHAR(50) NOT NULL,
 	last_name VARCHAR(50) NOT NULL,
 	birth_date DATE CHECK (birth_date > '1900-01-01'),
 	hire_date DATE CHECK (hire_date > birth_date),
	salary INTEGER CHECK (salary > 0)
);

:: INSERT a record into table employees

INSERT INTO employees(first_name, last_name, birth_date, hire_date, salary)
VALUES
	('John', 'Doe', '1901-01-01', '2010-09-17', 10000);

INSERT INTO employees(first_name, last_name, birth_date, hire_date, salary)
VALUES
	('Jane', 'Doe', '1901-01-01', '2010-09-17', 20000);













